/* 
Name: Dominic Orsi
Class: CPSC 122 Section 1
Date: Feburary 8, 2021
Assignment: Project 5
Description: Takes in files from the command line and generates a key, encrypts a file, and 
decrypts the file using the key generated. 
*/

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>

using namespace std;

void generateKey(string keyFile);
void encryptFile(string keyFile, string plainText, string cipherFile);
void decryptFile(string keyFile, string cipherFile, string decryptFile);
int keyGen();
char encrypt(char ch, int key);
char decrypt(char ch, int key);
void fileOpen(fstream& file, string name, char mode);

int main(int argc, char* argv[])
{
	int mode = 0;
	
	mode = atoi(argv[1]);
	
	if(mode == 0)
	{
		generateKey(argv[2]);
	}
	if(mode == 1)
	{
		encryptFile(argv[2], argv[3], argv[4]);
	}
	if(mode == 2)
	{
		decryptFile(argv[2], argv[3], argv[4]);
	}
	return 0;
}

/*
Description: Calls the keyGen function and prints the key to the KeyFile
Input: KeyFile to write to
Output: Prints the key generated by the keyGen function to the keyFile
*/ 
void generateKey(string keyFile)
{
	int keyNum = 0;
	
	fstream fout;
	
	// Call to fileOpen function
	fileOpen(fout, keyFile, 'w');
	
	// Call to function keyGen that then writes integer to 
	keyNum = keyGen();
	
	
	// Writing keyNum to keyFile
	fout << keyNum << endl;

	fout.close();
}

/*
Description: Calls the encrypt function and then writes the encrypted text to cipherFile
Input: KeyFile with valid key, plainText file and the cipherFile
Output: An encrypted version of the plainText file printed out to the cipherFile
*/ 
void encryptFile(string keyFile, string plainText, string cipherFile)
{
	int keyNum = 0;
	int i = 0;
	char readingIn = ' ';
	char encryptChar = ' ';
	string readingInString = "";
	
	fstream cipherOut;
	fstream PTIn;
	fstream keyIn;
	
	// Call fileOpen functions
	fileOpen(keyIn, keyFile, 'r');
	fileOpen(PTIn, plainText, 'r');
	fileOpen(cipherOut, cipherFile, 'w');
		
	keyIn >> keyNum;
		
	// While loop to read through plainText file
	while(PTIn.peek() != EOF)
	{
		getline(PTIn, readingInString);
		
		// For loop to get each char in a string into a char
		for(i = 0; i < readingInString.length(); i++)
		{
		
			readingIn = readingInString[i];
			
			// If statement to make sure readingIn is uppercase
			// then make it uppercase if it is not
			if(isalpha(readingIn))
			{
				readingIn = toupper(readingIn);
			}
			
			// Call to function encrypt
			encryptChar = encrypt(readingIn, keyNum);
			cipherOut << encryptChar;
		}	
	}
	
	PTIn.close();
	keyIn.close();
	cipherOut.close();
}

/*
Description: Calls the decrypt fucntion and prints it out onto the decryptFile
Input: KeyFile with valid key, the ciphered file and then the decryptFile to write to
Output: A deciphered version of the chipered text read in from cipherFile
*/ 
void decryptFile(string keyFile, string cipherFile, string decryptFile)
{
	int i = 0;
	int keyNum = 0;
	char readingIn = ' ';
	char decryptChar = ' ';
	string readingInString = "";

	fstream keyIn;
	fstream cipherIn;
	fstream decryptOut;
	
	// Call fileOpen functions
	fileOpen(keyIn, keyFile, 'r');
	fileOpen(cipherIn, cipherFile, 'r');
	fileOpen(decryptOut, decryptFile, 'w');

	keyIn >> keyNum;
		
	// While loop
	while(cipherIn.peek() != EOF)
	{
		getline(cipherIn, readingInString);
		
		// For loop to get each char in a string into a char
		for(i = 0; i < readingInString.length(); i++)
		{
			readingIn = readingInString[i];
			
			// Call to function decrypt
			decryptChar = decrypt(readingIn, keyNum);
			decryptOut << decryptChar;
		}
	}
		
	keyIn.close();
	cipherIn.close();
	decryptOut.close();	
}

/*
Description: Randomly generates an integer in the range: [1..25]
Input: None
Output: writes a randomly generated integer in the range [1..25] to keyFile 
*/
int keyGen()
{
	int keyNum = 0;
	
	srand(time(0));
	
	// Rand to get a random number between 1-25
	keyNum = (rand() % (25 - 1 + 1)) +1;
	
	return keyNum;
}
	
/*
Description: Encrypts an upper case alphabetic character using the Caesar cipher
Input: upper case alphabetic character, valid key
Returns: encrypted version of ch
*/
char encrypt (char ch, int key)
{
	// If statement to avoid ascii characters outside of uppercase A-Z
	if(ch >= 'A' && ch <= 'Z')
	{
		ch += key;
		
		// If statement to keep converting characters in alphabet range
		if(ch > 'Z')
		{
			ch = ch - 'Z' + 'A' - 1;
		}
	}
	return ch;
}

/*
Description: Decrypts an upper case alphabetic character using the Caesar cipher
Input: upper case alphabetic character, valid key
Returns: decrypted version of input
*/

char decrypt (char ch, int key)
{
	// If statement to avoid ascii characters outside of uppercase A-Z
	if(ch >= 'A' && ch <= 'Z')
	{
		ch -= key;
		
		// If statement to keep converting characters in alphabet range
		if(ch < 'A')
		{
			ch = ch + 'Z' - 'A' + 1;
		}
	}
	return ch;
}

/*
Description: function opens a file 
Input: file stream object reference, name of the file, mode of open
Output: void function, but at exit, file stream object is tied to 
the input file name. 
*/ 

void fileOpen(fstream& file, string name, char mode)
{
 string fileType;

 if (mode == 'r')
  fileType = "input";
 if (mode == 'w')
  fileType = "output";

 if (mode == 'r')
  file.open(name, ios::in);  //available thorugh fstream
 if (mode == 'w')
  file.open(name, ios::out);  //available through fstream;

 if (file.fail()) //error condition 
 {
  cout << "Error opening " << fileType << " file" << endl; 
  exit(EXIT_FAILURE);
 }
}
